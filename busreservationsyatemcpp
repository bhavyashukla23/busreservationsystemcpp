#include <iostream>
#include <cstdio>
#include <conio.h>
#include <string.h>
#include <cstdlib>
using namespace std;

static int passenger = 0;

class one

{

  char busn[10], driver[200], arrival[5], depart[5], from[10], to[10], seat[8][4][10];

public:
       void install();
       void allotment();
       void empty();
       void show();
       void avail();
       void position(int i);

}

bus[10];

void vline(char ch)

{

  for (int i=80;i>0;i--)
     cout<<ch;

}

void one::install()

{
  cout<<"Enter bus no: ";
  cin>>bus[passenger].busn;
  cout<<"\nEnter Driver's name: ";
  cin>>bus[passenger].driver;
  cout<<"\nArrival time: ";
  cin>>bus[passenger].arrival;
  cout<<"\nDeparture: ";
  cin>>bus[passenger].depart;
  cout<<"\nFrom: \t\t\t";
  cin>>bus[passenger].from;
  cout<<"\nTo: \t\t\t";
  cin>>bus[passenger].to;
  bus[passenger].empty();
  passenger++;

}

void one::allotment()

{
  int seat;
  char number[5];
  top:
  cout<<"Bus no: ";
  cin>>number;
  int n;

  for(n=0;n<=passenger;n++)
  {
    if(strcmp(bus[n].busn, number)==0)
    break;
  }

  while(n<=passenger)

  {
   cout<<"\nSeat Number: ";
    cin>>seat;
    if(seat>32)
    {
      cout<<"\nThere are only 32 seats available in this bus.";
    }

    else
    {
    if (strcmp(bus[n].seat[seat/4][(seat%4)-1], "Empty")==0)
      {
        cout<<"Enter passanger's name: ";
         cin>>bus[n].seat[seat/4][(seat%4)-1];
          break;
      }

    else
        cout<<"The seat no. is already reserved.\n";
    }
    
    }
    if(n>passenger)
    {
      cout<<"Enter correct bus no.\n";
      goto top;
    }
  }


void one::empty()
{
	int i,j;
  for(i=0; i<8;i++)
  {
    for(j=0;j<4;j++)
    {
      strcpy(bus[passenger].seat[i][j], "Empty");
    }
  }
}

void one::show()
{
  int n;
 char number[5];
  cout<<"Enter bus no: ";
  cin>>number;
  for(n=0;n<=passenger;n++)
  {
    if(strcmp(bus[n].busn, number)==0)
    break;
  }
while(n<=passenger)
{
  vline('*');
  cout<<"Bus no: \t"<<bus[n].busn;
  cout<<"\nDriver: \t"<<bus[n].driver;
  cout<<"\t\tArrival time: \t"<<bus[n].arrival;
  cout<<"\tDeparture time:"<<bus[n].depart;
  cout<<"\nFrom: \t\t"<<bus[n].from;
  cout<<"\t\tTo: \t\t"<<bus[n].to<<"\n";
  vline('*');
  bus[0].position(n);
  int a=1;
  for (int i=0; i<8; i++)
  {
    for(int j=0;j<4;j++)
    {
      a++;
      if(strcmp(bus[n].seat[i][j],"Empty")!=0)
      cout<<"\nThe seat no "<<(a-1)<<" is reserved for "<<bus[n].seat[i][j]<<".";
    }
  }
  break;
  }
  if(n>passenger)
    cout<<"Enter correct bus no: ";
}

void one::position(int l)
{
  int i,j,s=0;passenger=0;
  for (i=0; i<8;i++)
  {
    cout<<"\n";
    for (j = 0;j<4; j++)
    {
      s++;
      if(strcmp(bus[l].seat[i][j], "Empty")==0)//strcmp is a fuction used here to check if the seat is empty
        {
          cout.width(5);
          cout.fill(' ');
          cout<<s<<".";
          cout.width(10);
          cout.fill(' ');
          cout<<bus[l].seat[i][j];
          passenger++;
        }
        else
        {
        cout.width(5);
        cout.fill(' ');
        cout<<s<<".";
        cout.width(10);
        cout.fill(' ');
        cout<<bus[l].seat[i][j];
        }
      }
    }
  cout<<"\n\nThere are "<<passenger<<" seats empty in Bus No: "<<bus[l].busn;
  }

void one::avail()

{
	int n;
  for(n=0;n<passenger;n++)
  {
    vline('*'); //vline is a function which is used for printing thr content inside the inverted commas
    cout<<"Bus no: \t"<<bus[n].busn;
	cout<<"\nDriver: \t"<<bus[n].driver;
    cout<<"\t\tArrival time: \t"<<bus[n].arrival;
	cout<<"\tDeparture Time: \t"<<bus[n].depart;
	cout<<"\nFrom: \t\t"<<bus[n].from;
	cout<<"\t\tTo: \t\t\t"<<bus[n].to<<"\n";
    vline('*');
    vline('_');
  }
}


int main()
{

system("cls"); //used to clear the screen

int ch;

while(1)

{

    //system("cls");

  cout<<"\n\n\n\n\n";

  cout<<"\t\t\t1.Install\n";

  cout<<"\t\t\t2.Reservation\n";

  cout<<"\t\t\t3.Show\n";
  
  cout<<"\t\t\t4.Buses Available.\n";

  cout<<"\t\t\t5.Exit";

  cout<<"\n\t\t\tEnter your choice:-> ";

  cin>>ch;

  switch(ch)

  {
    case 1:  bus[passenger].install();
      break;
      
    case 2:  bus[passenger].allotment();
      break;

    case 3:  bus[0].show();
      break;

    case 4:  bus[0].avail();
      break;
      
    case 5:  exit(0);
  }

}

return 0;

}


